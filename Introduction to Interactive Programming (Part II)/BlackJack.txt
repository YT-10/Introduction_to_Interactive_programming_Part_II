http://www.codeskulptor.org/#user43_cyZZG3RjIe_2.py

# Mini-project #6 - Blackjack
# Author: Yusuf Tatlier

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False #True when game is ongoing and False otherwise
score = 0
space=5
status=0 #Specifies message_dict states
message_dict={0:"Hit or Stand?",1:"You lose, New Deal?",2:"You win, new Deal?"}
              

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand=[]

    def __str__(self):
        s=""
        for i in self.hand:
            s=s+str(i)
        return s

    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        value=0
        number_A=len([card.rank for card in self.hand if card.rank=="A"])
        for i in self.hand:
            value=value+VALUES[i.get_rank()]
        for i in range(number_A):
            if(value<10):
                    value += 10 
        return(value)
   
    def draw(self, canvas, pos):
        for card in self.hand:
            pos[0] += CARD_SIZE[0] + space
            card.draw(canvas, pos)
            
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck=[]
        
    def fillCards(self):    
        for i in RANKS:
            for j in SUITS:
                self.deck.append(Card(j,i))

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        return(self.deck.pop())
    
    def __str__(self):
        deckString=""
        for k in self.deck:
                deckString += str(k)
        return deckString

#define event handlers for buttons
def deal():
    global in_play, status, score, dealer_hand, player_hand, deck
    
    if(in_play==True):
        status=1
        score -= 1
        in_play=False
        #deal()
    
    else:
        #Initialize certain variables
        status=0
        deck=Deck()
        deck.fillCards()
        deck.shuffle()
        
        player_hand=Hand()
        dealer_hand=Hand()
        n_player,n_dealer=0,0
        
        while(n_player<2):
            player_hand.add_card(deck.deal_card())
            n_player += 1
        
        while(n_dealer<2):
            dealer_hand.add_card(deck.deal_card())
            n_dealer += 1

        in_play = True

def hit():
    global player_hand, deck, in_play, score, status
    
    if in_play:
        if(player_hand.get_value()<22):
            player_hand.add_card(deck.deal_card())
        
        if(player_hand.get_value()>21):
            in_play=False
            status=1
            score -= 1
            
            
def stand():
    global deck, in_play, player_hand, dealer_hand, status, score
    
    in_play=False
    
    if(dealer_hand.get_value()>player_hand.get_value()):
        status=1
        score -= 1
    
    while(dealer_hand.get_value()<player_hand.get_value() and dealer_hand.get_value()<22):
        dealer_hand.add_card(deck.deal_card())
        if(dealer_hand.get_value()>21):
            status=2
            score += 1
        elif(dealer_hand.get_value()<22 and dealer_hand.get_value()>player_hand.get_value()):
            status=1
            score -= 1
            
def draw(canvas):
    global message_dict, status, score, player_hand, dealer_hand, in_play, status
        
    # Block for putting text in the canvas
    canvas.draw_text("Blackjack",(200,100),50,"Blue")
    canvas.draw_text("Dealer",(250,200),40,"Red")
    canvas.draw_text("Player",(250,400),40,"Red")
    canvas.draw_text("Score is " + str(score),(30,320),30,"Black")
    canvas.draw_text("Hand value is "+str(player_hand.get_value()),(230,550),18,"Black")
    canvas.draw_text("Hand value is "+str(dealer_hand.get_value()),(230,350),18,"Black")
    
    # Putting message
    canvas.draw_text(message_dict[status],(200,150),30,"Black") 
    
    # player and dealer hands
    player_hand.draw(canvas,[130,420])
    dealer_hand.draw(canvas,[130,220])
    
    #If game is ongoing, first card of the dealer is hidden
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (243,267), CARD_BACK_SIZE)
        
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()

# remember to review the gradic rubric
